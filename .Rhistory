rmses <- sapply(lambdas, function(l) {
movie_avgs <- get_movie_effect_reg(l)
predicted_ratings <- test_set %>%
left_join(movie_avgs, by="movieId") %>%
mutate(pred = mu + b_i) %>%
.$pred
RMSE(predicted_ratings, test_set$rating)
})
qplot(lambdas, rmses)
# best lambda for calculating movie effect
b_i_lambda <- lambdas[which.min(rmses)]
# save regularized movie biases
movie_avgs_reg <- get_movie_effect_reg(b_i_lambda)
rmse_results <- bind_rows(rmse_results,
data_frame(method="Regularized Movie Effect Model",
RMSE = min(rmses)))
rmse_results %>% knitr::kable()
# given lambda, compute regularized user effect for each user
get_user_avgs_reg <- function(l) {
train_set %>%
left_join(movie_avgs_reg, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - mu - b_i)/(n() + l))
}
# find best lambda for user effect regularization
rmses <- sapply(lambdas, function(l) {
user_avgs <- get_user_avgs_reg(l)
predicted_ratings <- test_set %>%
left_join(movie_avgs_reg, by="movieId") %>%
left_join(user_avgs, by="userId") %>%
mutate(pred = mu + b_i + b_u) %>%
.$pred
RMSE(predicted_ratings, test_set$rating)
})
# plot lambdas
qplot(lambdas, rmses)
# save best lambda
b_u_lambda <- lambdas[which.min(rmses)]
# save regularized user effects using the best lambda
user_avgs_reg <- get_user_avgs_reg(b_u_lambda)
rmse_results <- bind_rows(rmse_results,
data_frame(method="Regularized Movie + User Effect Model",
RMSE = min(rmses)))
rmse_results %>% knitr::kable()
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# save regularized user effects using the best lambda
user_avgs_reg <- get_user_avgs_reg(b_u_lambda)
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
RMSE(predicted_ratings, validation$rating)
head(movie_avgs_reg)
head(user_avgs_reg)
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
RMSE(predicted_ratings, validation$rating)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
print(head(user_avgs_reg))
head(user_avgs_reg)
head(user_avgs_reg)
head(user_avgs_reg)
head(user_avgs_reg)
head(validation)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId")
validation <- validation %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId")
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId")
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + ifelse(is.na(validation$b_i), 0, is.na(validation$b_i)) + ifelse(is.na(validation$b_u), 0, validation$b_u)
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId")
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId")
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + ifelse(is.na(validation$b_i), 0, validation$b_i) + ifelse(is.na(validation$b_u), 0, validation$b_u)
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
opts$min
source('~/Documents/projects/movielens/finalModel.R', echo=TRUE)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(is.na(b_i), 0, 5), b_u = ifelse(is.na(b_u), 0, b_u))
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(b_i, 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(.$b_i, 0, .$b_i), b_u = ifelse(is.na(.$b_u), 0, .$b_u))
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = case_when(is.na(b_i) ~ 0, TRUE ~ b_i), b_u = ifelse(is.na(.$b_u), 0, .$b_u))
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_ii = case_when(is.na(b_i) ~ 0, TRUE ~ b_i), b_u = ifelse(is.na(.$b_u), 0, .$b_u))
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId")
head(validation)
head(user_avgs_reg)
head(movie_avgs_reg)
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(b_i.x, 0, b_i.x), b_u = ifelse(is.na(b_u.x), 0, b_u.x))
train_set
head(train_set)
head(validation)
validation <- validation %>%
left_join(user_avgs_reg, by="userId", suffix = "") %>%
left_join(movie_avgs_reg, by="movieId", suffix = "") %>%
mutate(b_i = ifelse(b_i, 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId", suffix = c("", "")) %>%
left_join(movie_avgs_reg, by="movieId", suffix = c("", "")) %>%
mutate(b_i = ifelse(b_i, 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
validation <- readRDS('./validation.rds')
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(b_i, 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
head(validation)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(b_i, 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
setNames(gsub('\\.x$', '', names(.))) %>%
mutate(b_i = ifelse(b_i, 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
head(validation)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
setNames(gsub('\\.x$', '', names(.))) %>%
mutate(b_i = ifelse(b_i, 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
head(validation)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
setNames(gsub('\\.x$', '', names(.))) %>%
mutate(b_i = ifelse(b_i, 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
setNames(gsub('\\.x$', '', names(.))) %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
setNames(gsub('\\.x$', '', names(.))) %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
head(movie_avgs_reg)
head(user_avgs_reg)
# compute residuals for test set
train_set <- train_set %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
mutate(res = rating - mu - b_i - b_u)
# specify data set for recosystem's DataSource
train_data <- data_memory(user_index = train_set$userId, item_index = train_set$movieId,
rating = train_set$res, index1 = TRUE)
# create model object
r = Reco()
# train
set.seed(123)
# the parameters in opts were previously tuned
r$train(train_data,  opts = list(dim = 30, lrate = 0.1,
costp_l1 = 0, costq_l1 = 0,
costq_l2 = 0.1, loss_fun = 0.8017479,
nthread = 1, niter = 10))
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
setNames(gsub('\\.x$', '', names(.))) %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
source('~/Documents/projects/movielens/finalModel.R', echo=TRUE)
source('~/Documents/projects/movielens/finalModel.R', echo=TRUE)
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
setNames(gsub('\\.x$', '', names(.))) %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
# predict
predicted_ratings <- r$predict(test_data, out_memory()) + mu + test_set$b_i + test_set$b_u
# change ratings over max to max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# find first half rating
half_rating_start <- train_set %>%
filter(rating %% 1 == 0.5) %>%
pull(timestamp) %>%
min()
# change values below one from dates before half ratings to a one.
ind <- which(predicted_ratings < 1 & test_set$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
# change values below 0.5 from dates after half ratings to a 0.5
ind <- which(predicted_ratings < 0.5 & test_set$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute RMSE
rmse_results <- bind_rows(rmse_results,
data_frame(method="Regularized Movie + User Effect + Matrix Factorization Model",
RMSE = RMSE(predicted_ratings, test_set$rating)))
rmse_results %>% knitr::kable()
# create model object
r = Reco()
# train
set.seed(123)
# the parameters in opts were previously tuned
r$train(train_data,  opts = list(dim = 30, lrate = 0.1,
costp_l1 = 0, costq_l1 = 0,
costq_l2 = 0.1, loss_fun = 0.8017479,
nthread = 1, niter = 20))
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
setNames(gsub('\\.x$', '', names(.))) %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
# train
set.seed(123)
# the parameters in opts were previously tuned
r$train(train_data, opts = c(opts$min, nthread = 1, niter = 20))
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
setNames(gsub('\\.x$', '', names(.))) %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
# train
set.seed(123)
# the parameters in opts were previously tuned
r$train(train_data, opts = c(opts$min, nthread = 1, niter = 10))
# add b_i's and b_u's to the validation set
validation <- validation %>%
left_join(user_avgs_reg, by="userId") %>%
left_join(movie_avgs_reg, by="movieId") %>%
setNames(gsub('\\.x$', '', names(.))) %>%
mutate(b_i = ifelse(is.na(b_i), 0, b_i), b_u = ifelse(is.na(b_u), 0, b_u))
# make validation data a DataSource for recosystem
validation_data <- data_memory(user_index = validation$userId, item_index = validation$movieId, index1 = TRUE)
# predict residuals for validation and add them to the mean and user and movie effects
predicted_ratings <- r$predict(validation_data, out_memory()) + mu + validation$b_i + validation$b_u
# change predictions over max to the max
ind <- which(predicted_ratings > 5)
predicted_ratings[ind] <- 5
# change predictions under min to the min
ind <- which(predicted_ratings < 1 & validation$timestamp < half_rating_start)
predicted_ratings[ind] <- 1
ind <- which(predicted_ratings < 0.5 & validation$timestamp >= half_rating_start)
predicted_ratings[ind] <- 0.5
# compute final RMSE
RMSE(predicted_ratings, validation$rating)
b_u_lambda
# naive model that predicts average rating everytime
mu <- mean(train_set$rating)
naive_rmse <- RMSE(test_set$rating, mu)
rmse_results <-data_frame(method = "Just the average", RMSE = naive_rmse)
rmse_results %>% knitr::kable()
